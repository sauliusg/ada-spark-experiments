(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "x" defined at nonlinear.adb:1, created in Gnat2Why.Decls.Translate_Constant *)
module Nonlinear__x
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:822] [name:X] [sloc:nonlinear.adb:1] x () requires
    {  } ensures  {  } returns int

end

(* Module for defining the constant "y" defined at nonlinear.adb:1, created in Gnat2Why.Decls.Translate_Constant *)
module Nonlinear__y
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:823] [name:Y] [sloc:nonlinear.adb:1] y () requires
    {  } ensures  {  } returns int

end

(* Module for defining the constant "z" defined at nonlinear.adb:1, created in Gnat2Why.Decls.Translate_Constant *)
module Nonlinear__z
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:824] [name:Z] [sloc:nonlinear.adb:1] z () requires
    {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "r1" defined at nonlinear.adb:1, created in Gnat2Why.Decls.Translate_Variable *)
module Nonlinear__r1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val r1 [model_trace:829] [name:R1]
  [model_projected] [sloc:nonlinear.adb:1]: int

end

(* Module for defining a ref holding the value of variable "r2" defined at nonlinear.adb:1, created in Gnat2Why.Decls.Translate_Variable *)
module Nonlinear__r2
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val r2 [name:R2] [model_projected]
  [model_trace:830] [sloc:nonlinear.adb:1]: int

end

(* Module giving an empty axiom for the entity "x" defined at nonlinear.adb:1, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nonlinear__x___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "y" defined at nonlinear.adb:1, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nonlinear__y___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "z" defined at nonlinear.adb:1, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nonlinear__z___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "r1" defined at nonlinear.adb:1, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nonlinear__r1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "r2" defined at nonlinear.adb:1, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nonlinear__r2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "nonlinear" defined at nonlinear.adb:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nonlinear__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Int_Division
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Nonlinear__x
  use        Nonlinear__y
  use        Nonlinear__z
  use        Nonlinear__r1
  use        Nonlinear__r2
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Nonlinear__x___axiom
  use        Nonlinear__y___axiom
  use        Nonlinear__z___axiom
  use        Nonlinear__r1___axiom
  use        Nonlinear__r2___axiom
  
  function  [sloc:nonlinear.adb:1] def (__void_param : unit) requires
    { True } ensures 
    { ([sloc:nonlinear.adb:4] ([GP_Check:2:VC_POSTCONDITION:nonlinear.adb:4:11]
                              [GP_Shape:pragargs__cmp]
                              [model_vc_post] (!Nonlinear__r1.r1
                                                 <= !Nonlinear__r2.r2))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram nonlinear.adb:1 *);
        assume
        { (Standard__positive___axiom.dynamic_invariant Nonlinear__x.x True
             False True True) };
        assume
        { (Standard__positive___axiom.dynamic_invariant Nonlinear__y.y True
             False True True) };
        assume
        { (Standard__positive___axiom.dynamic_invariant Nonlinear__z.z True
             False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant !Nonlinear__r1.r1
             False False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant !Nonlinear__r2.r2
             False False True True) };
        (* Assume moved pointers in outputs of the subprogram nonlinear.adb:1 *);
        (* Check for RTE in the Pre of the subprogram nonlinear.adb:1 *);
        abstract ensures
        { True } begin  (let _ = (Nonlinear__y.y > Nonlinear__z.z) in ())  end;
        (* Assume Pre of the subprogram nonlinear.adb:1 *);
        assume { (Nonlinear__y.y > Nonlinear__z.z) };
        (try
        ();
          ([sloc:nonlinear.adb:4] ());
          ([sloc:nonlinear.adb:3] ());
          ([sloc:nonlinear.adb:2] ());
          ();
          ([sloc:nonlinear.adb:7] ( Nonlinear__r1.r1 :=
          ( ([sloc:nonlinear.adb:7] ([vc:annotation]
                                    [GP_Shape:r1_assign__div]
                                    [GP_Check:0:VC_DIVISION_CHECK:nonlinear.adb:7:12] (
                                    _gnatprove_standard.Int_Division.div_
                                      Nonlinear__x.x Nonlinear__y.y))))));
          ([sloc:nonlinear.adb:8] ( Nonlinear__r2.r2 :=
          ( ([sloc:nonlinear.adb:8] ([vc:annotation]
                                    [GP_Check:1:VC_DIVISION_CHECK:nonlinear.adb:8:12]
                                    [GP_Shape:r2_assign__div] (_gnatprove_standard.Int_Division.div_
                                                                 Nonlinear__x.x
                                                                 Nonlinear__z.z))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = (!Nonlinear__r1.r1 <= !Nonlinear__r2.r2) in
                       ())  end

end
